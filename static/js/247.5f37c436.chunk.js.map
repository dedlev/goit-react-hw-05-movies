{"version":3,"file":"static/js/247.5f37c436.chunk.js","mappings":"0OA0HA,UArDa,WACT,IAAAA,GAAyBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAKF,EAAA,GAAEG,EAAOH,EAAA,GACrBI,GAA4BL,EAAAA,EAAAA,UAASM,EAAAA,EAAAA,MAAYC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAA1CG,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAEhBG,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACkB,SAAAC,IAUvB,OAVuBA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAxB,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC8B,OAA1BX,EAAUH,EAAAA,EAAAA,SAAgBY,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEHC,EAAAA,EAAAA,IAAQX,EAAS,WAAW,KAAD,EAAxCO,EAAIC,EAAAI,KACNlB,EAAQa,EAAKM,MACbd,EAAUH,EAAAA,EAAAA,SAAgBY,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAE9BT,EAAUH,EAAAA,EAAAA,OACVmB,QAAQC,IAAGR,EAAAM,IAAQ,yBAAAN,EAAAS,OAAA,GAAAX,EAAA,mBAE1BY,MAAA,KAAAC,UAAA,EAXY,WACWhB,EAAAe,MAAC,KAADC,UAAA,CAYxBC,EACJ,GAAG,CAACpB,KAGAqB,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CACKxB,IAAWF,EAAAA,EAAAA,UAAkB2B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACpC1B,IAAWF,EAAAA,EAAAA,QAAgB2B,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uBAC9BxB,IAAWF,EAAAA,EAAAA,UACR2B,EAAAA,EAAAA,KAAAE,EAAAA,SAAA,CAAAH,SACsB,IAAjB7B,EAAMiC,QACHH,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBAEHC,EAAAA,EAAAA,KAAA,MAAAD,SACK7B,EAAMkC,KAAI,SAAAd,GAAI,OACXQ,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACKT,EAAKe,eACFL,EAAAA,EAAAA,KAAA,OACIM,IAAG,kCAAAC,OAAoCjB,EAAKe,cAC5CG,IAAKlB,EAAKmB,KACVC,MAAO,CAAEC,SAAU,QAASC,OAAQ,WAG5CZ,EAAAA,EAAAA,KAAA,KAAAD,SAAIT,EAAKmB,QACTX,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYT,EAAKuB,eATfvB,EAAKwB,GAUT,UAQrC,C,sDCxHO,IAAMzC,EAAS,CAClB0C,KAAM,OACNC,QAAS,UACTC,QAAS,UACTC,MAAO,Q,8LCFLC,EAAU,mCACVC,EAAYC,EAAAA,EAAAA,OAAa,CAAEC,QAAS,kCAW7BC,EAAS,eAAAC,GAAA3C,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAA0C,EAAAzC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACAiC,EAAUM,IAAI,qBAAsB,CACzDC,OAAQ,CACJC,QAAST,KAEZ,KAAD,EAJU,OAIVM,EAAAxC,EAAAI,KAJML,EAAIyC,EAAJzC,KAAIC,EAAA4C,OAAA,SAKL7C,GAAI,wBAAAC,EAAAS,OAAA,GAAAX,EAAA,KACZ,kBAPqB,OAAAyC,EAAA7B,MAAA,KAAAC,UAAA,KAUTkC,EAAe,eAAAC,GAAAlD,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAkD,EAAOvD,GAAO,IAAAwD,EAAAjD,EAAA,OAAAF,IAAAA,MAAA,SAAAoD,GAAA,cAAAA,EAAAhD,KAAAgD,EAAA/C,MAAA,cAAA+C,EAAA/C,KAAA,EACpBiC,EAAUM,IAAI,UAADnB,OAAW9B,GAAW,CACxDkD,OAAQ,CACNC,QAAST,EACTgB,mBAAoB,YAErB,KAAD,EALU,OAKVF,EAAAC,EAAA7C,KALML,EAAIiD,EAAJjD,KAAIkD,EAAAL,OAAA,SAML7C,GAAI,wBAAAkD,EAAAxC,OAAA,GAAAsC,EAAA,KACZ,gBAR2BI,GAAA,OAAAL,EAAApC,MAAA,KAAAC,UAAA,KAUfR,EAAO,eAAAiD,GAAAxD,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAwD,EAAO7D,EAASa,GAAI,IAAAiD,EAAAvD,EAAA,OAAAF,IAAAA,MAAA,SAAA0D,GAAA,cAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,cAAAqD,EAAArD,KAAA,EAClBiC,EAAUM,IAAI,UAADnB,OAAW9B,EAAO,KAAA8B,OAAIjB,GAAQ,CAChEqC,OAAQ,CACNC,QAAST,KAEV,KAAD,EAJU,OAIVoB,EAAAC,EAAAnD,KAJML,EAAIuD,EAAJvD,KAAIwD,EAAAX,OAAA,SAKL7C,GAAI,wBAAAwD,EAAA9C,OAAA,GAAA4C,EAAA,KACZ,gBAPmBG,EAAAC,GAAA,OAAAL,EAAA1C,MAAA,KAAAC,UAAA,KASP+C,EAAU,eAAAC,GAAA/D,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAA+D,EAAOpE,EAASqE,GAAO,IAAAC,EAAA/D,EAAA,OAAAF,IAAAA,MAAA,SAAAkE,GAAA,cAAAA,EAAA9D,KAAA8D,EAAA7D,MAAA,cAAA6D,EAAA7D,KAAA,EAC5BiC,EAAUM,IAAI,UAADnB,OAAW9B,EAAO,KAAA8B,OAAIuC,GAAW,CACjEnB,OAAQ,CACNC,QAAST,KAEV,KAAD,EAJS,OAIT4B,EAAAC,EAAA3D,KAJKL,EAAI+D,EAAJ/D,KAAIgE,EAAAnB,OAAA,SAKJ7C,GAAI,wBAAAgE,EAAAtD,OAAA,GAAAmD,EAAA,KACV,gBAPsBI,EAAAC,GAAA,OAAAN,EAAAjD,MAAA,KAAAC,UAAA,KASVuD,EAAc,eAAAC,GAAAvE,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAuE,EAAOC,GAAK,IAAAC,EAAAvE,EAAA,OAAAF,IAAAA,MAAA,SAAA0E,GAAA,cAAAA,EAAAtE,KAAAsE,EAAArE,MAAA,cAAAqE,EAAArE,KAAA,EACnBiC,EAAUM,IAAI,gBAAiB,CAClDC,OAAQ,CACN2B,MAAAA,EACA1B,QAAST,KAEX,OALS,OAKToC,EAAAC,EAAAnE,KALKL,EAAIuE,EAAJvE,KAAIwE,EAAA3B,OAAA,SAMJ7C,GAAI,wBAAAwE,EAAA9D,OAAA,GAAA2D,EAAA,KACZ,gBAR0BI,GAAA,OAAAL,EAAAzD,MAAA,KAAAC,UAAA,I","sources":["components/Cast/Cast.jsx","constants/status.constants.js","services/movies.services.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { getCast } from 'services/movies.services';\n// import { STATUS } from 'constants/status.constants';\n// import { Loader } from 'ui/Loader';\n\n\n// const Cast = () => {\n//     const [casts, setCast] = useState([]);\n//     const [status, setStatus] = useState(STATUS.IDLE);\n\n//     const {movieId} = useParams();\n\n//     useEffect(() => {\n//         async function fetchData() {\n//             setStatus(STATUS.LOADING);\n//             try{\n//         const data =  await getCast(movieId, 'credits');\n//         if (data.cast.length === 0) {\n//             setStatus(STATUS.SUCCESS);\n//         }\n//                 setCast(data.cast);\n//                 setStatus(STATUS.SUCCESS);\n\n//             } catch (error) {\n//                 setStatus(STATUS.ERROR);\n//                 console.log(error)\n//             } \n//         }\n\n//         fetchData(movieId, 'credits')\n     \n//     }, [movieId])\n\n//     return (\n//         <main>\n//             {status === STATUS.LOADING && <Loader />}\n//             {status === STATUS.ERROR && <p>Error loading data</p>}\n//             {status === STATUS.SUCCESS && (\n//                 <ul>\n//                     {casts.map(cast => (\n//                         <li key={cast.id}>\n//                             {cast.profile_path && (\n//                                 <img \n//                                     src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`} \n//                                     alt={cast.name} \n//                                     style={{ maxWidth: '100px', height: 'auto' }} \n//                                 />\n//                             )}\n//                             <p>{cast.name}</p>\n//                             <p>Character: {cast.character}</p>\n//                         </li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </main>\n       \n  \n//     )\n// }\n\n// export default Cast;\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services/movies.services';\nimport { STATUS } from 'constants/status.constants';\nimport { Loader } from 'ui/Loader';\n\nconst Cast = () => {\n    const [casts, setCast] = useState([]);\n    const [status, setStatus] = useState(STATUS.IDLE);\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        async function fetchData() {\n            setStatus(STATUS.LOADING);\n            try {\n                const data = await getCast(movieId, 'credits');\n                    setCast(data.cast);\n                    setStatus(STATUS.SUCCESS);\n            } catch (error) {\n                setStatus(STATUS.ERROR);\n                console.log(error);\n            }\n        }\n\n        fetchData();\n    }, [movieId]);\n\n    return (\n        <main>\n            {status === STATUS.LOADING && <Loader />}\n            {status === STATUS.ERROR && <p>Error loading data</p>}\n            {status === STATUS.SUCCESS && (\n                <>\n                    {casts.length === 0 ? (\n                        <p>No cast data found</p>\n                    ) : (\n                        <ul>\n                            {casts.map(cast => (\n                                <li key={cast.id}>\n                                    {cast.profile_path && (\n                                        <img \n                                            src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`} \n                                            alt={cast.name} \n                                            style={{ maxWidth: '100px', height: 'auto' }} \n                                        />\n                                    )}\n                                    <p>{cast.name}</p>\n                                    <p>Character: {cast.character}</p>\n                                </li>\n                            ))}\n                        </ul>\n                    )}\n                </>\n            )}\n        </main>\n    );\n}\n\nexport default Cast;\n","export const STATUS = {\n    IDLE: 'idle',\n    LOADING: 'loading',\n    SUCCESS: 'success',\n    ERROR: 'error',\n}","import axios from 'axios';\n\nconst API_KEY = '3646fa4826ffb51a1129efde8ab530b7'\nconst moviesApi = axios.create({ baseURL: 'https://api.themoviedb.org/3/' });\n\n// export const getMovies = async (query='', timeWindow='') => {\n//   const { data } = await moviesApi.get(`${query}/movie/${timeWindow}`, {\n//     params: {\n//         api_key: API_KEY,  \n//     },\n//   });\n//   return data;\n// };\n\nexport const getMovies = async () => {\n  const { data } = await moviesApi.get(`trending/movie/day`, {\n    params: {\n        api_key: API_KEY,  \n    },\n  });\n  return data;\n};\n\n\nexport const getMovieDetails = async (movieId) => {\n  const { data } = await moviesApi.get(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY, \n      append_to_response: 'images',\n    },\n  });\n  return data;\n};\n\nexport const getCast = async (movieId, cast) => {\n  const { data } = await moviesApi.get(`/movie/${movieId}/${cast}`, {\n    params: {\n      api_key: API_KEY, \n    },\n  });\n  return data;\n};\n\nexport const getReviews = async (movieId, reviews) => {\nconst {data} = await moviesApi.get(`/movie/${movieId}/${reviews}`, {\n  params: {\n    api_key: API_KEY, \n  },\n});\nreturn data;\n};\n\nexport const getSearchQuery = async (query) => {\n  const {data} = await moviesApi.get(`/search/movie`, {\n    params: {\n      query,\n      api_key: API_KEY,\n    }\n  })\n  return data;\n}\n\n"],"names":["_useState","useState","_useState2","_slicedToArray","casts","setCast","_useState3","STATUS","_useState4","status","setStatus","movieId","useParams","useEffect","_fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","getCast","sent","cast","t0","console","log","stop","apply","arguments","fetchData","_jsxs","children","_jsx","Loader","_Fragment","length","map","profile_path","src","concat","alt","name","style","maxWidth","height","character","id","IDLE","LOADING","SUCCESS","ERROR","API_KEY","moviesApi","axios","baseURL","getMovies","_ref","_yield$moviesApi$get","get","params","api_key","abrupt","getMovieDetails","_ref2","_callee2","_yield$moviesApi$get2","_context2","append_to_response","_x","_ref3","_callee3","_yield$moviesApi$get3","_context3","_x2","_x3","getReviews","_ref4","_callee4","reviews","_yield$moviesApi$get4","_context4","_x4","_x5","getSearchQuery","_ref5","_callee5","query","_yield$moviesApi$get5","_context5","_x6"],"sourceRoot":""}